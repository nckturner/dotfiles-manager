#!/bin/zsh

dotfile_manager_root="$HOME/.dotfiles-manager"
dotfiles="${dotfile_manager_root}/dotfiles"
modules_conf="${dotfiles}/modules.yaml"
zsh_sourcefile="${dotfile_manager_root}/bin/sourcefile.zsh"

check_installation() {
    # check where dotfiles manager is installed
    if [[ ! -d $dotfile_manager_root ]] {
        print "Dotfiles was not installed correctly.  Be sure to install it in '$dotfile_manager_root'."
        exit 1
    }

    if [[ ! check_dep.py ]] {
        exit 1
    }

}

process_dotfile() {
    src=$1
    print -n "Found $src..."
    if [[ $src =~ ".*rc|.*config" ]] {
        # if $src ends with 'rc' or 'config', symlink it to '.$src', 
        # i.e. dotfiles/modules/vim/vimrc -> /home/user/.vimrc
        #      dotfiles/modules/git/gitconfig -> /home/user/.gitconfig
        dst="$HOME/.$(basename "${src##*/}")"
        if [[ -f "$dst" ]] {
            print " Link to $dst already exists."
        } else {
            print -n " Linking: "
            ln -sv "$src" "$dst"
        }
    } elif [[ $src =~ ".*\.symlink" ]] {
        # if $src ends with '.symlink', symlink it to '.$src' and remove the .symlink extension.
        dst="$HOME/.$(basename "${${a%.*}##*/}")"
        if [[ -f "$dst" ]] {
            print " Link to $dst already exists."
        } else {
            print -n " Linking: "
            ln -sv "$src" "$dst"
        }
    } elif [[ $src =~ ".*zsh" ]] {
        print " Adding ${src} to sourcefile."
        print "source ${src}" >> "$zsh_sourcefile"
    }
} 

dotfile_regex_str=".*rc|.*config|.*zsh|.*\.symlink"

add_dotfiles() {

    generate_sourcefile_zsh

    echo "Processing default files..."
    # find each default file and process it
    for file in $(find "$dotfiles/default" -maxdepth 3 -type f -regextype posix-extended -regex $dotfile_regex_str)
    do
        echo $file
        process_dotfile $file    
    done

    module_list=$(./modules.py)

    echo "Processing modules..."
    # for each module (must be in a directory of the same name) modules.conf, find it in dotfiles and process it
    while read module 
    do 
        for file in $(find $dotfiles/modules -regextype posix-extended -regex "$dotfiles/modules/$module/.+" -print)
        do
            echo $file
            process_dotfile $file 
        done
    done < $modules_list
}

generate_sourcefile_zsh() {
    print "Regenerating sourcefile (${zsh_sourcefile})"
    
    define-heredoc text <<'EOF'
# This file was generated by dotfiles.  Do not modify this file.
# Regenerate it with the bootstrap script.  

EOF

    print $text > $zsh_sourcefile
}

define-heredoc() {
    IFS='\n' read -r -d '' ${1} || true;
}

check_installation
add_dotfiles

